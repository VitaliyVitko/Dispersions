{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Копия блокнота \"Копия блокнота \"dispersion law for layer.ipynb\"\"",
      "provenance": [],
      "authorship_tag": "ABX9TyPQ8TlUXq1hW6fbErj4GZcR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/VitaliyVitko/Dispersions/blob/main/dispersion_law_for_layer\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X_VumxDMQD2i"
      },
      "outputs": [],
      "source": [
        "from sympy import *\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "var ('omega,k1,k2,k,m,a,epsilon1,epsilon2,c')\n",
        "param=[(m,1),(a,10**-6),(epsilon1,1),(epsilon2,1.5**2),(c,float(299792458))];\n",
        "#dispersion law\n",
        "k11=(sqrt(k**2-omega**2*epsilon1/c**2));\n",
        "k22=(sqrt(omega**2*epsilon2/c**2-k**2));"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DL=(k2*a-atan(k1/k2)-(m-1)*(pi/2))#tan(k2*a)-k1/k2#\n",
        "DL.subs(k1,k11).subs(k2,k22)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "id": "6qYcacgwQOyB",
        "outputId": "7aa2654f-567a-4ea1-ceb2-0744cda9a8ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle a \\sqrt{- k^{2} + \\frac{\\epsilon_{2} \\omega^{2}}{c^{2}}} - \\frac{\\pi \\left(m - 1\\right)}{2} - \\operatorname{atan}{\\left(\\frac{\\sqrt{k^{2} - \\frac{\\epsilon_{1} \\omega^{2}}{c^{2}}}}{\\sqrt{- k^{2} + \\frac{\\epsilon_{2} \\omega^{2}}{c^{2}}}} \\right)}$",
            "text/plain": [
              "a*sqrt(-k**2 + epsilon2*omega**2/c**2) - pi*(m - 1)/2 - atan(sqrt(k**2 - epsilon1*omega**2/c**2)/sqrt(-k**2 + epsilon2*omega**2/c**2))"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k0=(2*pi/(1.55*10**-6)).evalf()\n",
        "c0=(c/epsilon1**0.5*k0).subs(param).evalf();\n",
        "DDL=DL.subs(k1,k11).subs(k2,k22).subs(param);"
      ],
      "metadata": {
        "id": "M81hMQXCQQ1n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DDL"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "id": "FBdSeDWLQVLI",
        "outputId": "ced00faa-27e5-4f2e-c647-a0262d29e5ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 1.0 \\cdot 10^{-6} \\sqrt{- k^{2} + 2.50346262612064 \\cdot 10^{-17} \\omega^{2}} - \\operatorname{atan}{\\left(\\frac{1.0 \\sqrt{k^{2} - 1.11265005605362 \\cdot 10^{-17} \\omega^{2}}}{\\sqrt{- k^{2} + 2.50346262612064 \\cdot 10^{-17} \\omega^{2}}} \\right)}$",
            "text/plain": [
              "1.0e-6*sqrt(-k**2 + 2.50346262612064e-17*omega**2) - atan(1.0*sqrt(k**2 - 1.11265005605362e-17*omega**2)/sqrt(-k**2 + 2.50346262612064e-17*omega**2))"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(c0/(2*pi)*10**-12).evalf()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "dRzMvvpNQX4P",
        "outputId": "02ac8574-7f23-4d35-dc98-aaa2fb9c5dd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 193.414489032258$",
            "text/plain": [
              "193.414489032258"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(c0/(2*pi*sqrt(epsilon2))*10**-12).subs(param).evalf()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "FJbxDgrDvD5l",
        "outputId": "7656847c-b7c4-41ed-da15-34d62efaf9ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 128.942992688172$",
            "text/plain": [
              "128.942992688172"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nsolve(DDL.subs(k,k0),omega,c0,verify=False)/(2*pi*10**12).evalf()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "SOeR2fiDuQwN",
        "outputId": "dc7a4cbb-886f-44c8-e709-2048e8352494"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 134.338437499268 + 4.37046497604913 \\cdot 10^{-22} i$",
            "text/plain": [
              "134.338437499268 + 4.37046497604913e-22*I"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "w0=I;\n",
        "while (im(w0)>0) or (im(w0)<0):\n",
        "  w0=nsolve(DDL.subs(k,k0),omega,c0,verify=False)\n",
        "  c0=re(w0);\n",
        "  print((w0/(2*pi)*10**-12).evalf())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gwe1dWF-Qawn",
        "outputId": "7e793f39-42c3-4047-fdcc-688c30b0d379"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "134.338437499268 + 4.37046497604913e-22*I\n",
            "134.338437499268\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#wavenumber\n",
        "kk=[float(kk) for kk in np.arange(100, 10000000, 1000)]"
      ],
      "metadata": {
        "id": "XK8IgjKLQe1Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(kk)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6y-Z_Q7xS25g",
        "outputId": "7d7336ce-fe68-4a17-c7f8-96c581032dc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10000"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c0=(c/epsilon1**0.5*k).subs(k,kk[0]).subs(param).evalf();"
      ],
      "metadata": {
        "id": "3w2GYyJ_W3Vq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "0JVyB-gNW47x",
        "outputId": "a511c7ef-59a6-4230-aea7-c1612d0d6f43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 29979245800.0$",
            "text/plain": [
              "29979245800.0000"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nsolve(DDL.subs(k,kk[0]),omega,c0,verify=False)/(2*pi*10**12).evalf()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "nm6wZ8uEYSVo",
        "outputId": "4065ad4b-ba09-4b5b-debb-835c3d1abdf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 0.00477134512196081 + 2.2066526345451 \\cdot 10^{-26} i$",
            "text/plain": [
              "0.00477134512196081 + 2.2066526345451e-26*I"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "om=[];\n",
        "oc=[];\n",
        "for p in np.arange(0,len(kk),1):\n",
        "  #print(p)\n",
        "  #print(c0)\n",
        "  w0=I;\n",
        "  if (len(oc)==0):\n",
        "    c0=c0;\n",
        "  else: \n",
        "    c0=oc[p-1];\n",
        "  while (im(w0)>0) or (im(w0)<0):\n",
        "    w0=nsolve(DDL.subs(k,kk[p]),omega,c0,verify=False)\n",
        "    c0=re(w0);\n",
        "    \n",
        "    #print(w0)\n",
        "  oc.append(w0);\n",
        "  om.append(w0/(2*pi).evalf());"
      ],
      "metadata": {
        "id": "CAVZMdPDQhdA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DDL1=DL.subs(k1,k11).subs(k2,k22).subs(a,0.1*10**-6).subs(param);\n",
        "om1=[];\n",
        "oc1=[];\n",
        "for p in np.arange(0,len(kk),1):\n",
        "  #print(p)\n",
        "  #print(c0)\n",
        "  w0=I;\n",
        "  if (len(oc1)==0):\n",
        "    c0=c0;\n",
        "  else: \n",
        "    c0=oc1[p-1];\n",
        "  while (im(w0)>0) or (im(w0)<0):\n",
        "    w0=nsolve(DDL1.subs(k,kk[p]),omega,c0,verify=False)\n",
        "    c0=re(w0);\n",
        "    \n",
        "    #print(w0)\n",
        "  oc1.append(w0);\n",
        "  om1.append(w0/(2*pi).evalf());"
      ],
      "metadata": {
        "id": "yIgl8xQLXvgN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DDL2=DL.subs(k1,k11).subs(k2,k22).subs(a,0.05*10**-6).subs(param);\n",
        "om2=[];\n",
        "oc2=[];\n",
        "for p in np.arange(0,len(kk),1):\n",
        "  w0=I;\n",
        "  if (len(oc2)==0):\n",
        "    c0=c0;\n",
        "  else: \n",
        "    c0=oc2[p-1];\n",
        "  while (im(w0)>0) or (im(w0)<0):\n",
        "    w0=nsolve(DDL2.subs(k,kk[p]),omega,c0,verify=False)\n",
        "    c0=re(w0);\n",
        "  oc2.append(w0);\n",
        "  om2.append(w0/(2*pi).evalf());"
      ],
      "metadata": {
        "id": "QBcO4cwX8SM8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(om)"
      ],
      "metadata": {
        "id": "5JWVh6-yesXb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5b5a5d37-4734-404b-b02f-28cbffcb6bea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10000"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "omega1=[(c/sqrt(epsilon1)*kk/(2*pi).evalf()).subs(param) for kk in kk]\n",
        "omega2=[(c/sqrt(epsilon2)*kk/(2*pi).evalf()).subs(param) for kk in kk]"
      ],
      "metadata": {
        "id": "DbhQxL3WYoOb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plot\n",
        "fig = plt.figure()\n",
        "fig.subplots_adjust(top=2)\n",
        "ax1 = fig.add_subplot(211)\n",
        "ax1.set_ylabel('angular frequency, rad/Hz')\n",
        "ax1.set_title('Dispersion characteristic')\n",
        "plt.grid()\n",
        "ax1.plot(kk, om, 'g-',kk,om1,'b-',kk,om2,'c-')\n",
        "ax1.plot(kk, omega1,'r--', kk, omega2, 'r--')\n",
        "ax1.set_xlabel('wavenumber, rad/m')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5QvE__WCRYk2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "outputId": "6c225655-0a47-454e-b789-94d1315b5816"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "yiDoHP8PUaYf"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}